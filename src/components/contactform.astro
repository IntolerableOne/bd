---
import Button from "./ui/button.astro";
---

<form id="contact-form" class="needs-validation" novalidate>
  <div class="mb-5">
    <input
      type="text"
      placeholder="Full Name"
      required
      class="w-full px-4 py-3 border-2 placeholder:text-gray-800 rounded-md outline-none focus:ring-4 border-gray-300 focus:border-gray-600 ring-gray-100"
      name="name"
    />
    <div class="empty-feedback invalid-feedback text-red-400 text-sm mt-1">
      Please provide your full name.
    </div>
  </div>
  <div class="mb-5">
    <label for="email_address" class="sr-only">Email Address</label><input
      id="email_address"
      type="email"
      placeholder="Email Address"
      name="email"
      required
      class="w-full px-4 py-3 border-2 placeholder:text-gray-800 rounded-md outline-none focus:ring-4 border-gray-300 focus:border-gray-600 ring-gray-100"
    />
    <div class="empty-feedback text-red-400 text-sm mt-1">
      Please provide your email address.
    </div>
    <div class="invalid-feedback text-red-400 text-sm mt-1">
      Please provide a valid email address.
    </div>
  </div>
  <div class="mb-3">
    <textarea
      name="message"
      required
      placeholder="Your Message"
      class="w-full px-4 py-3 border-2 placeholder:text-gray-800 rounded-md outline-none h-36 focus:ring-4 border-gray-300 focus:border-gray-600 ring-gray-100"
    ></textarea>
    <div class="empty-feedback invalid-feedback text-red-400 text-sm mt-1">
      Please enter your message.
    </div>
  </div>
  <Button type="submit" size="lg" block>Send Message</Button>
  <div id="result" class="mt-3 text-center"></div>
</form>

<style>
  .invalid-feedback,
  .empty-feedback {
    display: none;
  }

  .was-validated :placeholder-shown:invalid ~ .empty-feedback {
    display: block;
  }

  .was-validated :not(:placeholder-shown):invalid ~ .invalid-feedback {
    display: block;
  }

  .is-invalid,
  .was-validated :invalid {
    border-color: #dc3545;
  }

  .sending {
    opacity: 0.7;
    pointer-events: none;
  }
</style>

<script is:inline>
  const form = document.getElementById("contact-form");
  const result = document.getElementById("result");

  form.addEventListener("submit", async function (e) {
    e.preventDefault();
    
    // Add visual feedback
    form.classList.add("was-validated", "sending");
    result.innerHTML = "Sending message...";
    result.className = "mt-3 text-center text-blue-600";

    if (!form.checkValidity()) {
      form.querySelectorAll(":invalid")[0].focus();
      form.classList.remove("sending");
      result.innerHTML = "";
      return;
    }

    const formData = new FormData(form);
    const data = {
      name: formData.get("name"),
      email: formData.get("email"),
      message: formData.get("message")
    };

    try {
      const response = await fetch("/api/contact", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json",
        },
        body: JSON.stringify(data),
      });

      const responseData = await response.json();

      if (response.ok) {
        result.className = "mt-3 text-center text-green-600";
        result.innerHTML = "✅ Message sent successfully! We'll get back to you soon.";
        form.reset();
        form.classList.remove("was-validated");
      } else {
        throw new Error(responseData.error || 'Failed to send message');
      }
    } catch (error) {
      console.error("Contact form error:", error);
      result.className = "mt-3 text-center text-red-600";
      result.innerHTML = "❌ Failed to send message. Please try again or email us directly.";
    } finally {
      form.classList.remove("sending");
      
      // Clear result message after 10 seconds
      setTimeout(() => {
        if (result.className.includes("green")) {
          result.innerHTML = "";
        }
      }, 10000);
    }
  });
</script>